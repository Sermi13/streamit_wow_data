/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i[\"return\"]) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", _regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, \"Generator\"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2); } }, _regeneratorDefine2(e, r, n, t); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n(function () {\n  \"use strict\";\n\n  $(document).on('change', '.datatable-filter [data-filter=\"select\"]', function () {\n    window.renderedDataTable.ajax.reload(null, false);\n  });\n  $(document).on('input', '.dt-search', function () {\n    window.renderedDataTable.ajax.reload(null, false);\n  });\n  var confirmSwal = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(message) {\n      return _regenerator().w(function (_context) {\n        while (1) switch (_context.n) {\n          case 0:\n            _context.n = 1;\n            return Swal.fire({\n              title: message,\n              icon: 'question',\n              showCancelButton: true,\n              confirmButtonColor: '#d33',\n              cancelButtonColor: '#858482',\n              confirmButtonText: 'Yes',\n              showClass: {\n                popup: 'animate__animated animate__zoomIn'\n              },\n              hideClass: {\n                popup: 'animate__animated animate__zoomOut'\n              }\n            }).then(function (result) {\n              return result;\n            });\n          case 1:\n            return _context.a(2, _context.v);\n        }\n      }, _callee);\n    }));\n    return function confirmSwal(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  window.confirmSwal = confirmSwal;\n  $('#quick-action-form').on('submit', function (e) {\n    e.preventDefault();\n    var form = $(this);\n    var url = form.attr('action');\n    var message = $('[name=\"message_' + $('[name=\"action_type\"]').val() + '\"]').val();\n    var rowdIds = $(\"#datatable_wrapper .select-table-row:checked\").map(function () {\n      return $(this).val();\n    }).get();\n    confirmSwal(message).then(function (result) {\n      if (!result.isConfirmed) return;\n      callActionAjax({\n        url: \"\".concat(url, \"?rowIds=\").concat(rowdIds),\n        body: form.serialize()\n      });\n      //\n    });\n  });\n\n  // Update status on switch\n  $(document).on('change', '#datatable_wrapper .switch-status-featured', function () {\n    var url = $(this).attr('data-url');\n    var body = {\n      featured: $(this).prop('checked') ? 1 : 0,\n      _token: $(this).attr('data-token')\n    };\n    callActionAjax({\n      url: url,\n      body: body\n    });\n  });\n\n  // Update status on switch\n  $(document).on('change', '#datatable_wrapper .switch-status-change', function () {\n    var url = $(this).attr('data-url');\n    var body = {\n      status: $(this).prop('checked') ? 1 : 0,\n      _token: $(this).attr('data-token')\n    };\n    callActionAjax({\n      url: url,\n      body: body\n    });\n  });\n  $(document).on('change', '#datatable_wrapper .switch-restricted-change', function () {\n    var url = $(this).attr('data-url');\n    var body = {\n      status: $(this).prop('checked') ? 1 : 0,\n      _token: $(this).attr('data-token')\n    };\n    callActionAjax({\n      url: url,\n      body: body\n    });\n  });\n  $(document).on('change', '#datatable_wrapper .change-select', function () {\n    var url = $(this).attr('data-url');\n    var body = {\n      value: $(this).val(),\n      _token: $(this).attr('data-token')\n    };\n    callActionAjax({\n      url: url,\n      body: body\n    });\n  });\n  function callActionAjax(_ref2) {\n    var url = _ref2.url,\n      body = _ref2.body;\n    $.ajax({\n      type: 'POST',\n      url: url,\n      data: body,\n      success: function success(res) {\n        if (res.status) {\n          window.successSnackbar(res.message);\n          window.renderedDataTable.ajax.reload(resetActionButtons, false);\n          var event = new CustomEvent('update_quick_action', {\n            detail: {\n              value: true\n            }\n          });\n          document.dispatchEvent(event);\n        } else {\n          Swal.fire({\n            title: 'Error',\n            text: res.message,\n            icon: \"error\",\n            showClass: {\n              popup: 'animate__animated animate__zoomIn'\n            },\n            hideClass: {\n              popup: 'animate__animated animate__zoomOut'\n            }\n          });\n          // window.errorSnackbar(res.message)\n        }\n      }\n    });\n  }\n\n  // Update status on button click\n  $(document).on('click', '#datatable_wrapper .button-status-change', function () {\n    var url = $(this).attr('data-url');\n    var body = {\n      status: 1,\n      _token: $(this).attr('data-token')\n    };\n    callActionAjax({\n      url: url,\n      body: body\n    });\n  });\n  function callActionAjax(_ref3) {\n    var url = _ref3.url,\n      body = _ref3.body;\n    $.ajax({\n      type: 'POST',\n      url: url,\n      data: body,\n      success: function success(res) {\n        if (res.status) {\n          window.successSnackbar(res.message);\n          window.renderedDataTable.ajax.reload(resetActionButtons, false);\n          var event = new CustomEvent('update_quick_action', {\n            detail: {\n              value: true\n            }\n          });\n          document.dispatchEvent(event);\n        } else {\n          window.errorSnackbar(res.message);\n        }\n      }\n    });\n  }\n\n  //select row in datatable\n  var dataTableRowCheck = function dataTableRowCheck(id) {\n    var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var dataType = source ? source.getAttribute('data-type') : null;\n    checkRow();\n    var actionDropdown = document.getElementById('quick-action-type');\n    if ($(\".select-table-row:checked\").length > 0) {\n      $(\"#quick-action-form\").removeClass('form-disabled');\n      //if at-least one row is selected\n      document.getElementById(\"select-all-table\").indeterminate = true;\n      $(\"#quick-actions\").find(\"input, textarea, button, select\").removeAttr(\"disabled\");\n    } else {\n      //if no row is selected\n      document.getElementById(\"select-all-table\").indeterminate = false;\n      $(\"#select-all-table\").attr(\"checked\", false);\n      resetActionButtons();\n    }\n    if ($(\"#datatable-row-\" + id).is(\":checked\")) {\n      $(\"#row-\" + id).addClass(\"table-active\");\n    } else {\n      $(\"#row-\" + id).removeClass(\"table-active\");\n    }\n    var rowdIds = $(\"#datatable_wrapper .select-table-row:checked\").map(function () {\n      return $(this).val();\n    }).get();\n    if (dataType !== null) {\n      if (dataType === 'cast-crew' || dataType === 'review') {\n        if (actionDropdown.options[2] !== undefined) {\n          actionDropdown.options[2].disabled = true; // Restore option\n        }\n        if (actionDropdown.options[3] !== undefined) {\n          actionDropdown.options[3].disabled = true; // Permanently Delete option\n        }\n        if (actionDropdown.options[1] !== undefined) {\n          actionDropdown.options[1].disabled = false;\n        }\n      } else {\n        if (actionDropdown.options[3] !== undefined) {\n          actionDropdown.options[3].disabled = true; // Restore option\n        }\n        if (actionDropdown.options[4] !== undefined) {\n          actionDropdown.options[4].disabled = true; // Permanently Delete option\n        }\n        if (actionDropdown.options[2] !== undefined) {\n          actionDropdown.options[2].disabled = false;\n        }\n      }\n    }\n    var baseUrl = document.querySelector('meta[name=\"base-url\"]').getAttribute('content');\n    var csrfToken = $('meta[name=\"csrf-token\"]').attr('content');\n    $.ajax({\n      type: 'POST',\n      headers: {\n        'X-CSRF-Token': csrfToken\n      },\n      url: baseUrl + \"/app/check-in-trash\",\n      data: {\n        ids: rowdIds,\n        datatype: dataType\n      },\n      success: function success(response) {\n        if (response.all_in_trash == true) {\n          if (dataType === 'cast-crew' || dataType === 'review') {\n            actionDropdown.options[2].disabled = false; // Restore option\n            actionDropdown.options[3].disabled = false; // Permanently Delete option\n            actionDropdown.options[1].disabled = true;\n          } else {\n            actionDropdown.options[3].disabled = false; // Restore option\n            actionDropdown.options[4].disabled = false; // Permanently Delete option\n            actionDropdown.options[2].disabled = true;\n          }\n        }\n      }\n    });\n    checkRow();\n  };\n  window.dataTableRowCheck = dataTableRowCheck;\n  var selectAllTable = function selectAllTable(source) {\n    var dataType = source.getAttribute('data-type');\n    var checkboxes = document.getElementsByName(\"datatable_ids[]\");\n    var actionDropdown = document.getElementById('quick-action-type');\n    var selectedIds = [];\n    for (var i = 0, n = checkboxes.length; i < n; i++) {\n      // if disabled property is given to checkbox, it won't select particular checkbox.\n      if (!$(\"#\" + checkboxes[i].id).prop('disabled')) {\n        checkboxes[i].checked = source.checked;\n        if (checkboxes[i].checked) {\n          selectedIds.push(checkboxes[i].value);\n        } else {\n          document.getElementById(\"select-all-table\").indeterminate = false;\n          $(\"#select-all-table\").attr(\"checked\", false);\n          resetActionButtons();\n        }\n      }\n      // if ($(\"#\" + checkboxes[i].id).is(\":checked\")) {\n      //     $(\"#\" + checkboxes[i].id)\n      //         .closest(\"tr\")\n      //         .addClass(\"table-active\");\n      //     $(\"#quick-actions\")\n      //         .find(\"input, textarea, button, select\")\n      //         .removeAttr(\"disabled\");\n      //     if ($(\"#quick-action-type\").val() == \"\") {\n      //         $(\"#quick-action-apply\").attr(\"disabled\", true);\n      //       }\n      // } else {\n      //     $(\"#\" + checkboxes[i].id)\n      //         .closest(\"tr\")\n      //         .removeClass(\"table-active\");\n      //     resetActionButtons();\n      // }\n    }\n    if (dataType !== null) {\n      if (dataType === 'cast-crew' || dataType === 'review') {\n        if (actionDropdown.options[2] !== undefined) {\n          actionDropdown.options[2].disabled = true; // Restore option\n        }\n        if (actionDropdown.options[3] !== undefined) {\n          actionDropdown.options[3].disabled = true; // Permanently Delete option\n        }\n        if (actionDropdown.options[1] !== undefined) {\n          actionDropdown.options[1].disabled = false;\n        }\n      } else {\n        if (actionDropdown.options[3] !== undefined) {\n          actionDropdown.options[3].disabled = true; // Restore option\n        }\n        if (actionDropdown.options[4] !== undefined) {\n          actionDropdown.options[4].disabled = true; // Permanently Delete option\n        }\n        if (actionDropdown.options[2] !== undefined) {\n          actionDropdown.options[2].disabled = false;\n        }\n      }\n    }\n    var baseUrl = document.querySelector('meta[name=\"base-url\"]').getAttribute('content');\n    var csrfToken = $('meta[name=\"csrf-token\"]').attr('content');\n    $.ajax({\n      type: 'POST',\n      headers: {\n        'X-CSRF-Token': csrfToken\n      },\n      url: baseUrl + \"/app/check-in-trash\",\n      data: {\n        ids: selectedIds,\n        datatype: dataType\n      },\n      success: function success(response) {\n        if (response.all_in_trash == true) {\n          if (dataType === 'cast-crew' || dataType === 'review') {\n            actionDropdown.options[2].disabled = false; // Restore option\n            actionDropdown.options[3].disabled = false; // Permanently Delete option\n            actionDropdown.options[1].disabled = true;\n          } else {\n            actionDropdown.options[3].disabled = false; // Restore option\n            actionDropdown.options[4].disabled = false; // Permanently Delete option\n            actionDropdown.options[2].disabled = true;\n          }\n        }\n      }\n    });\n    checkRow();\n  };\n  window.selectAllTable = selectAllTable;\n  var checkRow = function checkRow() {\n    if ($(\".select-table-row:checked\").length > 0) {\n      $(\"#quick-action-type\").prop('disabled', false);\n      $(\"#quick-action-form\").removeClass('form-disabled');\n      // $(\"#quick-action-apply\").removeClass(\"btn-primary\").addClass(\"btn-primary\");\n    } else {\n      $(\"#quick-action-type\").prop('disabled', true);\n      $(\"#quick-action-form\").addClass('form-disabled');\n      document.getElementById(\"select-all-table\").indeterminate = false;\n      // $(\"#quick-action-apply\").removeClass(\"btn-primary\").addClass(\"btn-primary\");\n    }\n  };\n  window.checkRow = checkRow;\n\n  //reset table action form elements\n  var resetActionButtons = function resetActionButtons() {\n    checkRow();\n    var quickActionForm = $(\"#quick-action-form\")[0];\n    if (document.getElementById(\"select-all-table\") !== undefined && document.getElementById(\"select-all-table\") !== null) {\n      document.getElementById(\"select-all-table\").checked = false;\n      if (quickActionForm !== undefined && quickActionForm !== null) {\n        quickActionForm.reset(); // Only reset if the form exists\n      }\n      $(\"#quick-actions\").find(\"input, textarea, button, select\").attr(\"disabled\", \"disabled\");\n      $(\"#quick-action-form\").find(\"select\").select2(\"destroy\").select2().val(null).trigger(\"change\");\n    }\n  };\n  window.resetActionButtons = resetActionButtons;\n\n  //  const initDatatable = ({url, finalColumns, advanceFilter, drawCallback = undefined, orderColumn}) => {\n\n  //     const data_table_limit = $('meta[name=\"data_table_limit\"]').attr('content');\n\n  //     window.renderedDataTable = $('#datatable').DataTable({\n  //         processing: true,\n  //         serverSide: true,\n  //         autoWidth: false,\n  //         responsive: true,\n  //         fixedHeader: true,\n  //         order: orderColumn,\n  //         pageLength: data_table_limit,\n  //         dom: '<\"table-responsive my-3 mt-3 mb-5 pb-1\" rt>' +  // Table without search\n  //              '<\"row\"<\"col-md-6\" info><\"col-md-6\" p>>' +  // Removed length menu (l) and search (f)\n  //              '<\"clear\">',\n  //         ajax: {\n  //             \"type\": \"GET\",\n  //             \"url\": url,\n  //             \"data\": function(d) {\n  //                 d.search = {\n  //                     value: $('.dt-search').val()\n  //                 };\n  //                 d.filter = {\n  //                     column_status: $('#column_status').val()\n  //                 }\n  //                 if (typeof advanceFilter == 'function' && advanceFilter() !== undefined) {\n  //                     d.filter = { ...d.filter, ...advanceFilter() }\n  //                 }\n  //             },\n  //         },\n  //         drawCallback: function() {\n  //             if (laravel !== undefined) {\n  //                 window.laravel.initialize();\n  //             }\n  //             $('.select2').select2();\n  //             if (drawCallback !== undefined && typeof drawCallback == 'function') {\n  //                 drawCallback();\n  //             }\n  //         },\n  //         columns: finalColumns,\n  //         infoCallback: function(settings, start, end, max, total, pre) {\n  //             const info = `Showing ${start} to ${end} of ${total} entries`;\n\n  //             // Update the info display at the bottom\n  //             $('.data_table_widgets .info').html(info);\n\n  //             return info;\n  //         },\n  //     });\n\n  //     // Hide the search box by adding d-none class\n  //     $('.dataTables_filter').addClass('d-none');\n  // }\n\n  var initDatatable = function initDatatable(_ref4) {\n    var url = _ref4.url,\n      finalColumns = _ref4.finalColumns,\n      advanceFilter = _ref4.advanceFilter,\n      _ref4$drawCallback = _ref4.drawCallback,\n      _drawCallback = _ref4$drawCallback === void 0 ? undefined : _ref4$drawCallback,\n      orderColumn = _ref4.orderColumn;\n    var data_table_limit = parseInt($('meta[name=\"data_table_limit\"]').attr('content'), 10);\n    window.renderedDataTable = $('#datatable').DataTable({\n      processing: true,\n      serverSide: true,\n      autoWidth: false,\n      responsive: true,\n      fixedHeader: true,\n      order: orderColumn,\n      pageLength: data_table_limit,\n      dom: '<\"table-responsive my-3 mt-3 mb-5 pb-1\" rt>' +\n      // Table without search\n      '<\"row\"<\"col-md-6\" info><\"col-md-6\" p>>' +\n      // Removed length menu (l) and search (f)\n      '<\"clear\">',\n      ajax: {\n        type: \"GET\",\n        url: url,\n        data: function data(d) {\n          d.search = {\n            value: $('.dt-search').val()\n          };\n          d.filter = {\n            column_status: $('#column_status').val()\n          };\n          if (typeof advanceFilter === 'function' && advanceFilter() !== undefined) {\n            d.filter = _objectSpread(_objectSpread({}, d.filter), advanceFilter());\n          }\n        }\n      },\n      drawCallback: function drawCallback() {\n        if (typeof window.laravel !== 'undefined') {\n          window.laravel.initialize();\n        }\n        $('.select2').select2();\n        if (typeof _drawCallback === 'function') {\n          _drawCallback();\n        }\n      },\n      columns: finalColumns,\n      infoCallback: function infoCallback(settings, start, end, max, total, pre) {\n        var info = \"Showing \".concat(start, \" to \").concat(end, \" of \").concat(total, \" entries\");\n\n        // Update the info display at the bottom\n        $('.data_table_widgets .info').html(info);\n        return info;\n      }\n    });\n\n    // Hide the search box by adding d-none class\n    $('.dataTables_filter').addClass('d-none');\n  };\n  window.initDatatable = initDatatable;\n  window.initDatatable = initDatatable;\n  function formatCurrency(number, noOfDecimal, decimalSeparator, thousandSeparator, currencyPosition, currencySymbol) {\n    // Convert the number to a string with the desired decimal places\n    var formattedNumber = number.toFixed(noOfDecimal);\n\n    // Split the number into integer and decimal parts\n    var _formattedNumber$spli = formattedNumber.split('.'),\n      _formattedNumber$spli2 = _slicedToArray(_formattedNumber$spli, 2),\n      integerPart = _formattedNumber$spli2[0],\n      decimalPart = _formattedNumber$spli2[1];\n\n    // Add thousand separators to the integer part\n    integerPart = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousandSeparator);\n\n    // Set decimalPart to an empty string if it is undefined\n    decimalPart = decimalPart || '';\n\n    // Construct the final formatted currency string\n    var currencyString = '';\n    if (currencyPosition === 'left' || currencyPosition === 'left_with_space') {\n      currencyString += currencySymbol;\n      if (currencyPosition === 'left_with_space') {\n        currencyString += ' ';\n      }\n      currencyString += integerPart;\n      // Add decimal part and decimal separator if applicable\n      if (noOfDecimal > 0) {\n        currencyString += decimalSeparator + decimalPart;\n      }\n    }\n    if (currencyPosition === 'right' || currencyPosition === 'right_with_space') {\n      // Add decimal part and decimal separator if applicable\n      if (noOfDecimal > 0) {\n        currencyString += integerPart + decimalSeparator + decimalPart;\n      }\n      if (currencyPosition === 'right_with_space') {\n        currencyString += ' ';\n      }\n      currencyString += currencySymbol;\n    }\n    return currencyString;\n  }\n  window.formatCurrency = formatCurrency;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJlIiwidCIsInIiLCJTeW1ib2wiLCJuIiwiaXRlcmF0b3IiLCJvIiwidG9TdHJpbmdUYWciLCJpIiwiYyIsInByb3RvdHlwZSIsIkdlbmVyYXRvciIsInUiLCJPYmplY3QiLCJjcmVhdGUiLCJfcmVnZW5lcmF0b3JEZWZpbmUyIiwiZiIsInAiLCJ5IiwiRyIsInYiLCJhIiwiZCIsImJpbmQiLCJsZW5ndGgiLCJsIiwiVHlwZUVycm9yIiwiY2FsbCIsImRvbmUiLCJ2YWx1ZSIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJnZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiZGlzcGxheU5hbWUiLCJfcmVnZW5lcmF0b3IiLCJ3IiwibSIsImRlZmluZVByb3BlcnR5IiwiX3JlZ2VuZXJhdG9yRGVmaW5lIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX2ludm9rZSIsImFzeW5jR2VuZXJhdG9yU3RlcCIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsIl9hc3luY1RvR2VuZXJhdG9yIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJfbmV4dCIsIl90aHJvdyIsIiQiLCJkb2N1bWVudCIsIm9uIiwid2luZG93IiwicmVuZGVyZWREYXRhVGFibGUiLCJhamF4IiwicmVsb2FkIiwiY29uZmlybVN3YWwiLCJfcmVmIiwiX2NhbGxlZSIsIm1lc3NhZ2UiLCJfY29udGV4dCIsIlN3YWwiLCJmaXJlIiwidGl0bGUiLCJpY29uIiwic2hvd0NhbmNlbEJ1dHRvbiIsImNvbmZpcm1CdXR0b25Db2xvciIsImNhbmNlbEJ1dHRvbkNvbG9yIiwiY29uZmlybUJ1dHRvblRleHQiLCJzaG93Q2xhc3MiLCJwb3B1cCIsImhpZGVDbGFzcyIsInJlc3VsdCIsIl94IiwicHJldmVudERlZmF1bHQiLCJmb3JtIiwidXJsIiwiYXR0ciIsInZhbCIsInJvd2RJZHMiLCJtYXAiLCJnZXQiLCJpc0NvbmZpcm1lZCIsImNhbGxBY3Rpb25BamF4IiwiY29uY2F0IiwiYm9keSIsInNlcmlhbGl6ZSIsImZlYXR1cmVkIiwicHJvcCIsIl90b2tlbiIsInN0YXR1cyIsIl9yZWYyIiwidHlwZSIsImRhdGEiLCJzdWNjZXNzIiwicmVzIiwic3VjY2Vzc1NuYWNrYmFyIiwicmVzZXRBY3Rpb25CdXR0b25zIiwiZXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImRpc3BhdGNoRXZlbnQiLCJ0ZXh0IiwiX3JlZjMiLCJlcnJvclNuYWNrYmFyIiwiZGF0YVRhYmxlUm93Q2hlY2siLCJpZCIsInNvdXJjZSIsInVuZGVmaW5lZCIsImRhdGFUeXBlIiwiZ2V0QXR0cmlidXRlIiwiY2hlY2tSb3ciLCJhY3Rpb25Ecm9wZG93biIsImdldEVsZW1lbnRCeUlkIiwicmVtb3ZlQ2xhc3MiLCJpbmRldGVybWluYXRlIiwiZmluZCIsInJlbW92ZUF0dHIiLCJpcyIsImFkZENsYXNzIiwib3B0aW9ucyIsImRpc2FibGVkIiwiYmFzZVVybCIsInF1ZXJ5U2VsZWN0b3IiLCJjc3JmVG9rZW4iLCJoZWFkZXJzIiwiaWRzIiwiZGF0YXR5cGUiLCJyZXNwb25zZSIsImFsbF9pbl90cmFzaCIsInNlbGVjdEFsbFRhYmxlIiwiY2hlY2tib3hlcyIsImdldEVsZW1lbnRzQnlOYW1lIiwic2VsZWN0ZWRJZHMiLCJjaGVja2VkIiwicHVzaCIsInF1aWNrQWN0aW9uRm9ybSIsInJlc2V0Iiwic2VsZWN0MiIsInRyaWdnZXIiLCJpbml0RGF0YXRhYmxlIiwiX3JlZjQiLCJmaW5hbENvbHVtbnMiLCJhZHZhbmNlRmlsdGVyIiwiX3JlZjQkZHJhd0NhbGxiYWNrIiwiZHJhd0NhbGxiYWNrIiwib3JkZXJDb2x1bW4iLCJkYXRhX3RhYmxlX2xpbWl0IiwicGFyc2VJbnQiLCJEYXRhVGFibGUiLCJwcm9jZXNzaW5nIiwic2VydmVyU2lkZSIsImF1dG9XaWR0aCIsInJlc3BvbnNpdmUiLCJmaXhlZEhlYWRlciIsIm9yZGVyIiwicGFnZUxlbmd0aCIsImRvbSIsInNlYXJjaCIsImZpbHRlciIsImNvbHVtbl9zdGF0dXMiLCJfb2JqZWN0U3ByZWFkIiwibGFyYXZlbCIsImluaXRpYWxpemUiLCJjb2x1bW5zIiwiaW5mb0NhbGxiYWNrIiwic2V0dGluZ3MiLCJzdGFydCIsImVuZCIsIm1heCIsInRvdGFsIiwicHJlIiwiaW5mbyIsImh0bWwiLCJmb3JtYXRDdXJyZW5jeSIsIm51bWJlciIsIm5vT2ZEZWNpbWFsIiwiZGVjaW1hbFNlcGFyYXRvciIsInRob3VzYW5kU2VwYXJhdG9yIiwiY3VycmVuY3lQb3NpdGlvbiIsImN1cnJlbmN5U3ltYm9sIiwiZm9ybWF0dGVkTnVtYmVyIiwidG9GaXhlZCIsIl9mb3JtYXR0ZWROdW1iZXIkc3BsaSIsInNwbGl0IiwiX2Zvcm1hdHRlZE51bWJlciRzcGxpMiIsIl9zbGljZWRUb0FycmF5IiwiaW50ZWdlclBhcnQiLCJkZWNpbWFsUGFydCIsInJlcGxhY2UiLCJjdXJyZW5jeVN0cmluZyJdLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvYXBwLmpzP2NlZDYiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7XG4gIFwidXNlIHN0cmljdFwiO1xuICAkKGRvY3VtZW50KS5vbignY2hhbmdlJywgJy5kYXRhdGFibGUtZmlsdGVyIFtkYXRhLWZpbHRlcj1cInNlbGVjdFwiXScsIGZ1bmN0aW9uKCkge1xuICAgIHdpbmRvdy5yZW5kZXJlZERhdGFUYWJsZS5hamF4LnJlbG9hZChudWxsLCBmYWxzZSlcbiAgfSlcblxuICAkKGRvY3VtZW50KS5vbignaW5wdXQnLCAnLmR0LXNlYXJjaCcsIGZ1bmN0aW9uKCkge1xuICAgIHdpbmRvdy5yZW5kZXJlZERhdGFUYWJsZS5hamF4LnJlbG9hZChudWxsLCBmYWxzZSlcbiAgfSlcblxuICBjb25zdCBjb25maXJtU3dhbCA9IGFzeW5jIChtZXNzYWdlKSA9PiB7XG4gICAgcmV0dXJuIGF3YWl0IFN3YWwuZmlyZSh7XG4gICAgICB0aXRsZTogbWVzc2FnZSxcbiAgICAgIGljb246ICdxdWVzdGlvbicsXG4gICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxuICAgICAgY29uZmlybUJ1dHRvbkNvbG9yOiAnI2QzMycsXG4gICAgICBjYW5jZWxCdXR0b25Db2xvcjogJyM4NTg0ODInLFxuICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICdZZXMnLFxuICAgICAgc2hvd0NsYXNzOiB7XG4gICAgICAgIHBvcHVwOiAnYW5pbWF0ZV9fYW5pbWF0ZWQgYW5pbWF0ZV9fem9vbUluJ1xuICAgICAgfSxcbiAgICAgIGhpZGVDbGFzczoge1xuICAgICAgICBwb3B1cDogJ2FuaW1hdGVfX2FuaW1hdGVkIGFuaW1hdGVfX3pvb21PdXQnXG4gICAgICB9XG4gICAgfSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfSlcbiAgfVxuXG4gIHdpbmRvdy5jb25maXJtU3dhbCA9IGNvbmZpcm1Td2FsXG5cbiAgJCgnI3F1aWNrLWFjdGlvbi1mb3JtJykub24oJ3N1Ym1pdCcsIGZ1bmN0aW9uKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBmb3JtID0gJCh0aGlzKVxuICAgIGNvbnN0IHVybCA9IGZvcm0uYXR0cignYWN0aW9uJylcbiAgICBjb25zdCBtZXNzYWdlID0gJCgnW25hbWU9XCJtZXNzYWdlXycrJCgnW25hbWU9XCJhY3Rpb25fdHlwZVwiXScpLnZhbCgpKydcIl0nKS52YWwoKVxuICAgIGNvbnN0IHJvd2RJZHMgPSAkKFwiI2RhdGF0YWJsZV93cmFwcGVyIC5zZWxlY3QtdGFibGUtcm93OmNoZWNrZWRcIikubWFwKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gJCh0aGlzKS52YWwoKTtcbiAgICB9KS5nZXQoKTtcblxuICAgIGNvbmZpcm1Td2FsKG1lc3NhZ2UpLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgaWYoIXJlc3VsdC5pc0NvbmZpcm1lZCkgcmV0dXJuXG4gICAgICBjYWxsQWN0aW9uQWpheCh7dXJsOiBgJHt1cmx9P3Jvd0lkcz0ke3Jvd2RJZHN9YCxib2R5OiBmb3JtLnNlcmlhbGl6ZSgpfSlcbiAgICAgIC8vXG4gICAgfSlcbiAgfSlcblxuICAvLyBVcGRhdGUgc3RhdHVzIG9uIHN3aXRjaFxuICAkKGRvY3VtZW50KS5vbignY2hhbmdlJywgJyNkYXRhdGFibGVfd3JhcHBlciAuc3dpdGNoLXN0YXR1cy1mZWF0dXJlZCcsIGZ1bmN0aW9uKCkge1xuICAgIGxldCB1cmwgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtdXJsJylcbiAgICBsZXQgYm9keSA9IHtcbiAgICAgIGZlYXR1cmVkOiAkKHRoaXMpLnByb3AoJ2NoZWNrZWQnKSA/IDEgOiAwLFxuICAgICAgX3Rva2VuOiAkKHRoaXMpLmF0dHIoJ2RhdGEtdG9rZW4nKVxuICAgIH1cbiAgICBjYWxsQWN0aW9uQWpheCh7dXJsOiB1cmwsIGJvZHk6IGJvZHl9KVxuICB9KVxuXG4gICAgLy8gVXBkYXRlIHN0YXR1cyBvbiBzd2l0Y2hcbiAgICAkKGRvY3VtZW50KS5vbignY2hhbmdlJywgJyNkYXRhdGFibGVfd3JhcHBlciAuc3dpdGNoLXN0YXR1cy1jaGFuZ2UnLCBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB1cmwgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtdXJsJylcbiAgICAgIGxldCBib2R5ID0ge1xuICAgICAgICBzdGF0dXM6ICQodGhpcykucHJvcCgnY2hlY2tlZCcpID8gMSA6IDAsXG4gICAgICAgIF90b2tlbjogJCh0aGlzKS5hdHRyKCdkYXRhLXRva2VuJylcbiAgICAgIH1cbiAgICAgIGNhbGxBY3Rpb25BamF4KHt1cmw6IHVybCwgYm9keTogYm9keX0pXG4gICAgfSlcblxuXG4gICAgJChkb2N1bWVudCkub24oJ2NoYW5nZScsICcjZGF0YXRhYmxlX3dyYXBwZXIgLnN3aXRjaC1yZXN0cmljdGVkLWNoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHVybCA9ICQodGhpcykuYXR0cignZGF0YS11cmwnKVxuICAgICAgbGV0IGJvZHkgPSB7XG4gICAgICAgIHN0YXR1czogJCh0aGlzKS5wcm9wKCdjaGVja2VkJykgPyAxIDogMCxcbiAgICAgICAgX3Rva2VuOiAkKHRoaXMpLmF0dHIoJ2RhdGEtdG9rZW4nKVxuICAgICAgfVxuICAgICAgY2FsbEFjdGlvbkFqYXgoe3VybDogdXJsLCBib2R5OiBib2R5fSlcbiAgICB9KVxuXG4gICQoZG9jdW1lbnQpLm9uKCdjaGFuZ2UnLCAnI2RhdGF0YWJsZV93cmFwcGVyIC5jaGFuZ2Utc2VsZWN0JywgZnVuY3Rpb24oKSB7XG4gICAgbGV0IHVybCA9ICQodGhpcykuYXR0cignZGF0YS11cmwnKVxuICAgIGxldCBib2R5ID0ge1xuICAgICAgdmFsdWU6ICQodGhpcykudmFsKCksXG4gICAgICBfdG9rZW46ICQodGhpcykuYXR0cignZGF0YS10b2tlbicpXG4gICAgfVxuICAgIGNhbGxBY3Rpb25BamF4KHt1cmw6IHVybCwgYm9keTogYm9keX0pXG4gIH0pXG5cbiAgZnVuY3Rpb24gY2FsbEFjdGlvbkFqYXggKHt1cmwsIGJvZHl9KSB7XG4gICAgJC5hamF4KHtcbiAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogYm9keSxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlcykge1xuICAgICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICAgIHdpbmRvdy5zdWNjZXNzU25hY2tiYXIocmVzLm1lc3NhZ2UpXG4gICAgICAgICAgd2luZG93LnJlbmRlcmVkRGF0YVRhYmxlLmFqYXgucmVsb2FkKHJlc2V0QWN0aW9uQnV0dG9ucywgZmFsc2UpXG4gICAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ3VwZGF0ZV9xdWlja19hY3Rpb24nLCB7ZGV0YWlsOiB7dmFsdWU6IHRydWV9fSlcbiAgICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIFN3YWwuZmlyZSh7XG4gICAgICAgICAgICB0aXRsZTogJ0Vycm9yJyxcbiAgICAgICAgICAgIHRleHQ6IHJlcy5tZXNzYWdlLFxuICAgICAgICAgICAgaWNvbjogXCJlcnJvclwiLFxuICAgICAgICAgICAgc2hvd0NsYXNzOiB7XG4gICAgICAgICAgICAgIHBvcHVwOiAnYW5pbWF0ZV9fYW5pbWF0ZWQgYW5pbWF0ZV9fem9vbUluJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhpZGVDbGFzczoge1xuICAgICAgICAgICAgICBwb3B1cDogJ2FuaW1hdGVfX2FuaW1hdGVkIGFuaW1hdGVfX3pvb21PdXQnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAvLyB3aW5kb3cuZXJyb3JTbmFja2JhcihyZXMubWVzc2FnZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvLyBVcGRhdGUgc3RhdHVzIG9uIGJ1dHRvbiBjbGlja1xuICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnI2RhdGF0YWJsZV93cmFwcGVyIC5idXR0b24tc3RhdHVzLWNoYW5nZScsIGZ1bmN0aW9uKCkge1xuXG4gICAgbGV0IHVybCA9ICQodGhpcykuYXR0cignZGF0YS11cmwnKVxuICAgIGxldCBib2R5ID0ge1xuICAgICAgc3RhdHVzOiAxLFxuICAgICAgX3Rva2VuOiAkKHRoaXMpLmF0dHIoJ2RhdGEtdG9rZW4nKVxuICAgIH1cbiAgICBjYWxsQWN0aW9uQWpheCh7dXJsOiB1cmwsIGJvZHk6IGJvZHl9KVxuICB9KVxuXG4gIGZ1bmN0aW9uIGNhbGxBY3Rpb25BamF4ICh7dXJsLCBib2R5fSkge1xuICAgICQuYWpheCh7XG4gICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGJvZHksXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgICB3aW5kb3cuc3VjY2Vzc1NuYWNrYmFyKHJlcy5tZXNzYWdlKVxuICAgICAgICAgIHdpbmRvdy5yZW5kZXJlZERhdGFUYWJsZS5hamF4LnJlbG9hZChyZXNldEFjdGlvbkJ1dHRvbnMsIGZhbHNlKVxuICAgICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCd1cGRhdGVfcXVpY2tfYWN0aW9uJywge2RldGFpbDoge3ZhbHVlOiB0cnVlfX0pXG4gICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChldmVudClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3aW5kb3cuZXJyb3JTbmFja2JhcihyZXMubWVzc2FnZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvL3NlbGVjdCByb3cgaW4gZGF0YXRhYmxlXG4gIGNvbnN0IGRhdGFUYWJsZVJvd0NoZWNrID0gKGlkLCBzb3VyY2UgPSBudWxsKSA9PiB7XG4gICAgdmFyIGRhdGFUeXBlID0gc291cmNlID8gc291cmNlLmdldEF0dHJpYnV0ZSgnZGF0YS10eXBlJykgOiBudWxsO1xuICAgIGNoZWNrUm93KCk7XG4gICAgY29uc3QgYWN0aW9uRHJvcGRvd24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncXVpY2stYWN0aW9uLXR5cGUnKTtcbiAgICBpZiAoJChcIi5zZWxlY3QtdGFibGUtcm93OmNoZWNrZWRcIikubGVuZ3RoID4gMCkge1xuICAgICAgICAkKFwiI3F1aWNrLWFjdGlvbi1mb3JtXCIpLnJlbW92ZUNsYXNzKCdmb3JtLWRpc2FibGVkJyk7XG4gICAgICAgIC8vaWYgYXQtbGVhc3Qgb25lIHJvdyBpcyBzZWxlY3RlZFxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlbGVjdC1hbGwtdGFibGVcIikuaW5kZXRlcm1pbmF0ZSA9IHRydWU7XG4gICAgICAgICQoXCIjcXVpY2stYWN0aW9uc1wiKS5maW5kKFwiaW5wdXQsIHRleHRhcmVhLCBidXR0b24sIHNlbGVjdFwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy9pZiBubyByb3cgaXMgc2VsZWN0ZWRcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZWxlY3QtYWxsLXRhYmxlXCIpLmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcbiAgICAgICAgJChcIiNzZWxlY3QtYWxsLXRhYmxlXCIpLmF0dHIoXCJjaGVja2VkXCIsIGZhbHNlKTtcbiAgICAgICAgcmVzZXRBY3Rpb25CdXR0b25zKCk7XG4gICAgfVxuXG4gICAgaWYgKCQoXCIjZGF0YXRhYmxlLXJvdy1cIiArIGlkKS5pcyhcIjpjaGVja2VkXCIpKSB7XG4gICAgICAgICQoXCIjcm93LVwiICsgaWQpLmFkZENsYXNzKFwidGFibGUtYWN0aXZlXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgICQoXCIjcm93LVwiICsgaWQpLnJlbW92ZUNsYXNzKFwidGFibGUtYWN0aXZlXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IHJvd2RJZHMgPSAkKFwiI2RhdGF0YWJsZV93cmFwcGVyIC5zZWxlY3QtdGFibGUtcm93OmNoZWNrZWRcIikubWFwKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICQodGhpcykudmFsKCk7XG4gICAgfSkuZ2V0KCk7XG5cbiAgICBpZihkYXRhVHlwZSAhPT0gbnVsbCl7XG5cbiAgICAgIGlmKGRhdGFUeXBlID09PSAnY2FzdC1jcmV3JyB8fCBkYXRhVHlwZSA9PT0gJ3Jldmlldycpe1xuICAgICAgICBpZiAoYWN0aW9uRHJvcGRvd24ub3B0aW9uc1syXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgYWN0aW9uRHJvcGRvd24ub3B0aW9uc1syXS5kaXNhYmxlZCA9IHRydWU7ICAvLyBSZXN0b3JlIG9wdGlvblxuICAgICAgICB9XG4gICAgICAgIGlmIChhY3Rpb25Ecm9wZG93bi5vcHRpb25zWzNdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBhY3Rpb25Ecm9wZG93bi5vcHRpb25zWzNdLmRpc2FibGVkID0gdHJ1ZTsgIC8vIFBlcm1hbmVudGx5IERlbGV0ZSBvcHRpb25cbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aW9uRHJvcGRvd24ub3B0aW9uc1sxXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgYWN0aW9uRHJvcGRvd24ub3B0aW9uc1sxXS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9ZWxzZXtcbiAgICAgICAgaWYgKGFjdGlvbkRyb3Bkb3duLm9wdGlvbnNbM10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGFjdGlvbkRyb3Bkb3duLm9wdGlvbnNbM10uZGlzYWJsZWQgPSB0cnVlOyAgLy8gUmVzdG9yZSBvcHRpb25cbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aW9uRHJvcGRvd24ub3B0aW9uc1s0XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgYWN0aW9uRHJvcGRvd24ub3B0aW9uc1s0XS5kaXNhYmxlZCA9IHRydWU7ICAvLyBQZXJtYW5lbnRseSBEZWxldGUgb3B0aW9uXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjdGlvbkRyb3Bkb3duLm9wdGlvbnNbMl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGFjdGlvbkRyb3Bkb3duLm9wdGlvbnNbMl0uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgfVxuXG5cbiAgICBjb25zdCBiYXNlVXJsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPVwiYmFzZS11cmxcIl0nKS5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKTtcbiAgICBjb25zdCBjc3JmVG9rZW4gPSAkKCdtZXRhW25hbWU9XCJjc3JmLXRva2VuXCJdJykuYXR0cignY29udGVudCcpO1xuXG4gICAgJC5hamF4KHtcbiAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ1gtQ1NSRi1Ub2tlbic6IGNzcmZUb2tlbixcbiAgICB9LFxuICAgICAgdXJsOiBiYXNlVXJsICsgXCIvYXBwL2NoZWNrLWluLXRyYXNoXCIsXG4gICAgICBkYXRhOiB7IGlkczogcm93ZElkcywgZGF0YXR5cGU6IGRhdGFUeXBlIH0sXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgIGlmKHJlc3BvbnNlLmFsbF9pbl90cmFzaCA9PSB0cnVlKXtcbiAgICAgICAgICAgIGlmKGRhdGFUeXBlID09PSAnY2FzdC1jcmV3JyB8fCBkYXRhVHlwZSA9PT0gJ3Jldmlldycpe1xuICAgICAgICAgICAgICAgIGFjdGlvbkRyb3Bkb3duLm9wdGlvbnNbMl0uZGlzYWJsZWQgPSBmYWxzZTsgIC8vIFJlc3RvcmUgb3B0aW9uXG4gICAgICAgICAgICAgICAgYWN0aW9uRHJvcGRvd24ub3B0aW9uc1szXS5kaXNhYmxlZCA9IGZhbHNlOyAgLy8gUGVybWFuZW50bHkgRGVsZXRlIG9wdGlvblxuICAgICAgICAgICAgICAgIGFjdGlvbkRyb3Bkb3duLm9wdGlvbnNbMV0uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgIGFjdGlvbkRyb3Bkb3duLm9wdGlvbnNbM10uZGlzYWJsZWQgPSBmYWxzZTsgLy8gUmVzdG9yZSBvcHRpb25cbiAgICAgICAgICAgICAgYWN0aW9uRHJvcGRvd24ub3B0aW9uc1s0XS5kaXNhYmxlZCA9IGZhbHNlOyAvLyBQZXJtYW5lbnRseSBEZWxldGUgb3B0aW9uXG4gICAgICAgICAgICAgIGFjdGlvbkRyb3Bkb3duLm9wdGlvbnNbMl0uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBjaGVja1JvdygpO1xuICB9O1xuICB3aW5kb3cuZGF0YVRhYmxlUm93Q2hlY2sgPSBkYXRhVGFibGVSb3dDaGVja1xuXG4gIGNvbnN0IHNlbGVjdEFsbFRhYmxlID0gKHNvdXJjZSkgPT4ge1xuICAgIHZhciBkYXRhVHlwZSA9IHNvdXJjZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdHlwZScpO1xuICAgIGNvbnN0IGNoZWNrYm94ZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZShcImRhdGF0YWJsZV9pZHNbXVwiKTtcbiAgICBjb25zdCBhY3Rpb25Ecm9wZG93biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdxdWljay1hY3Rpb24tdHlwZScpO1xuICAgIGNvbnN0IHNlbGVjdGVkSWRzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBjaGVja2JveGVzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAvLyBpZiBkaXNhYmxlZCBwcm9wZXJ0eSBpcyBnaXZlbiB0byBjaGVja2JveCwgaXQgd29uJ3Qgc2VsZWN0IHBhcnRpY3VsYXIgY2hlY2tib3guXG4gICAgICAgIGlmICghJChcIiNcIiArIGNoZWNrYm94ZXNbaV0uaWQpLnByb3AoJ2Rpc2FibGVkJykpe1xuICAgICAgICAgICAgY2hlY2tib3hlc1tpXS5jaGVja2VkID0gc291cmNlLmNoZWNrZWQ7XG4gICAgICAgICAgICBpZiAoY2hlY2tib3hlc1tpXS5jaGVja2VkKSB7XG4gICAgICAgICAgICAgIHNlbGVjdGVkSWRzLnB1c2goY2hlY2tib3hlc1tpXS52YWx1ZSk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZWxlY3QtYWxsLXRhYmxlXCIpLmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgJChcIiNzZWxlY3QtYWxsLXRhYmxlXCIpLmF0dHIoXCJjaGVja2VkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgcmVzZXRBY3Rpb25CdXR0b25zKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgKCQoXCIjXCIgKyBjaGVja2JveGVzW2ldLmlkKS5pcyhcIjpjaGVja2VkXCIpKSB7XG4gICAgICAgIC8vICAgICAkKFwiI1wiICsgY2hlY2tib3hlc1tpXS5pZClcbiAgICAgICAgLy8gICAgICAgICAuY2xvc2VzdChcInRyXCIpXG4gICAgICAgIC8vICAgICAgICAgLmFkZENsYXNzKFwidGFibGUtYWN0aXZlXCIpO1xuICAgICAgICAvLyAgICAgJChcIiNxdWljay1hY3Rpb25zXCIpXG4gICAgICAgIC8vICAgICAgICAgLmZpbmQoXCJpbnB1dCwgdGV4dGFyZWEsIGJ1dHRvbiwgc2VsZWN0XCIpXG4gICAgICAgIC8vICAgICAgICAgLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgLy8gICAgIGlmICgkKFwiI3F1aWNrLWFjdGlvbi10eXBlXCIpLnZhbCgpID09IFwiXCIpIHtcbiAgICAgICAgLy8gICAgICAgICAkKFwiI3F1aWNrLWFjdGlvbi1hcHBseVwiKS5hdHRyKFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XG4gICAgICAgIC8vICAgICAgIH1cbiAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgLy8gICAgICQoXCIjXCIgKyBjaGVja2JveGVzW2ldLmlkKVxuICAgICAgICAvLyAgICAgICAgIC5jbG9zZXN0KFwidHJcIilcbiAgICAgICAgLy8gICAgICAgICAucmVtb3ZlQ2xhc3MoXCJ0YWJsZS1hY3RpdmVcIik7XG4gICAgICAgIC8vICAgICByZXNldEFjdGlvbkJ1dHRvbnMoKTtcbiAgICAgICAgLy8gfVxuICAgIH1cbiAgICBpZihkYXRhVHlwZSAhPT0gbnVsbCl7XG4gICAgICBpZihkYXRhVHlwZSA9PT0gJ2Nhc3QtY3JldycgfHwgZGF0YVR5cGUgPT09ICdyZXZpZXcnKXtcbiAgICAgICAgIFxuICAgICAgICBpZiAoYWN0aW9uRHJvcGRvd24ub3B0aW9uc1syXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgYWN0aW9uRHJvcGRvd24ub3B0aW9uc1syXS5kaXNhYmxlZCA9IHRydWU7ICAvLyBSZXN0b3JlIG9wdGlvblxuICAgICAgICB9XG4gICAgICAgIGlmIChhY3Rpb25Ecm9wZG93bi5vcHRpb25zWzNdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBhY3Rpb25Ecm9wZG93bi5vcHRpb25zWzNdLmRpc2FibGVkID0gdHJ1ZTsgIC8vIFBlcm1hbmVudGx5IERlbGV0ZSBvcHRpb25cbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aW9uRHJvcGRvd24ub3B0aW9uc1sxXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgYWN0aW9uRHJvcGRvd24ub3B0aW9uc1sxXS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9ZWxzZXtcbiAgICAgICAgaWYgKGFjdGlvbkRyb3Bkb3duLm9wdGlvbnNbM10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGFjdGlvbkRyb3Bkb3duLm9wdGlvbnNbM10uZGlzYWJsZWQgPSB0cnVlOyAgLy8gUmVzdG9yZSBvcHRpb25cbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aW9uRHJvcGRvd24ub3B0aW9uc1s0XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgYWN0aW9uRHJvcGRvd24ub3B0aW9uc1s0XS5kaXNhYmxlZCA9IHRydWU7ICAvLyBQZXJtYW5lbnRseSBEZWxldGUgb3B0aW9uXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjdGlvbkRyb3Bkb3duLm9wdGlvbnNbMl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGFjdGlvbkRyb3Bkb3duLm9wdGlvbnNbMl0uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGJhc2VVcmwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW25hbWU9XCJiYXNlLXVybFwiXScpLmdldEF0dHJpYnV0ZSgnY29udGVudCcpO1xuICAgIGNvbnN0IGNzcmZUb2tlbiA9ICQoJ21ldGFbbmFtZT1cImNzcmYtdG9rZW5cIl0nKS5hdHRyKCdjb250ZW50Jyk7XG5cbiAgICAkLmFqYXgoe1xuICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnWC1DU1JGLVRva2VuJzogY3NyZlRva2VuLFxuICAgIH0sXG4gICAgICB1cmw6IGJhc2VVcmwgKyBcIi9hcHAvY2hlY2staW4tdHJhc2hcIixcbiAgICAgIGRhdGE6IHsgaWRzOiBzZWxlY3RlZElkcywgZGF0YXR5cGU6IGRhdGFUeXBlIH0sXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgIGlmKHJlc3BvbnNlLmFsbF9pbl90cmFzaCA9PSB0cnVlKXtcblxuICAgICAgICAgICAgaWYoZGF0YVR5cGUgPT09ICdjYXN0LWNyZXcnIHx8IGRhdGFUeXBlID09PSAncmV2aWV3Jyl7XG4gICAgICAgICAgICAgIGFjdGlvbkRyb3Bkb3duLm9wdGlvbnNbMl0uZGlzYWJsZWQgPSBmYWxzZTsgIC8vIFJlc3RvcmUgb3B0aW9uXG4gICAgICAgICAgICAgIGFjdGlvbkRyb3Bkb3duLm9wdGlvbnNbM10uZGlzYWJsZWQgPSBmYWxzZTsgIC8vIFBlcm1hbmVudGx5IERlbGV0ZSBvcHRpb25cbiAgICAgICAgICAgICAgYWN0aW9uRHJvcGRvd24ub3B0aW9uc1sxXS5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgYWN0aW9uRHJvcGRvd24ub3B0aW9uc1szXS5kaXNhYmxlZCA9IGZhbHNlOyAvLyBSZXN0b3JlIG9wdGlvblxuICAgICAgICAgICAgICBhY3Rpb25Ecm9wZG93bi5vcHRpb25zWzRdLmRpc2FibGVkID0gZmFsc2U7IC8vIFBlcm1hbmVudGx5IERlbGV0ZSBvcHRpb25cbiAgICAgICAgICAgICAgYWN0aW9uRHJvcGRvd24ub3B0aW9uc1syXS5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cblxuICAgIGNoZWNrUm93KCk7XG59O1xuXG5cbiAgd2luZG93LnNlbGVjdEFsbFRhYmxlID0gc2VsZWN0QWxsVGFibGVcblxuICBjb25zdCBjaGVja1JvdyA9ICgpID0+IHtcbiAgICBpZiAoJChcIi5zZWxlY3QtdGFibGUtcm93OmNoZWNrZWRcIikubGVuZ3RoID4gMCkge1xuICAgICAgJChcIiNxdWljay1hY3Rpb24tdHlwZVwiKS5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcbiAgICAgICQoXCIjcXVpY2stYWN0aW9uLWZvcm1cIikucmVtb3ZlQ2xhc3MoJ2Zvcm0tZGlzYWJsZWQnKTtcbiAgICAgIC8vICQoXCIjcXVpY2stYWN0aW9uLWFwcGx5XCIpLnJlbW92ZUNsYXNzKFwiYnRuLXByaW1hcnlcIikuYWRkQ2xhc3MoXCJidG4tcHJpbWFyeVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJChcIiNxdWljay1hY3Rpb24tdHlwZVwiKS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgJChcIiNxdWljay1hY3Rpb24tZm9ybVwiKS5hZGRDbGFzcygnZm9ybS1kaXNhYmxlZCcpO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZWxlY3QtYWxsLXRhYmxlXCIpLmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcbiAgICAgIC8vICQoXCIjcXVpY2stYWN0aW9uLWFwcGx5XCIpLnJlbW92ZUNsYXNzKFwiYnRuLXByaW1hcnlcIikuYWRkQ2xhc3MoXCJidG4tcHJpbWFyeVwiKTtcbiAgICB9XG4gIH1cblxuICB3aW5kb3cuY2hlY2tSb3cgPSBjaGVja1Jvd1xuXG4gIC8vcmVzZXQgdGFibGUgYWN0aW9uIGZvcm0gZWxlbWVudHNcbiAgY29uc3QgcmVzZXRBY3Rpb25CdXR0b25zID0gKCkgPT4ge1xuICAgIGNoZWNrUm93KClcbiAgICBjb25zdCBxdWlja0FjdGlvbkZvcm0gPSAkKFwiI3F1aWNrLWFjdGlvbi1mb3JtXCIpWzBdO1xuICAgIGlmKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VsZWN0LWFsbC10YWJsZVwiKSAhPT0gdW5kZWZpbmVkICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VsZWN0LWFsbC10YWJsZVwiKSAhPT0gbnVsbCkge1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZWxlY3QtYWxsLXRhYmxlXCIpLmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgIGlmIChxdWlja0FjdGlvbkZvcm0gIT09IHVuZGVmaW5lZCAmJiBxdWlja0FjdGlvbkZvcm0gIT09IG51bGwpIHtcbiAgICAgICAgcXVpY2tBY3Rpb25Gb3JtLnJlc2V0KCk7ICAvLyBPbmx5IHJlc2V0IGlmIHRoZSBmb3JtIGV4aXN0c1xuICAgIH1cbiAgICAgICQoXCIjcXVpY2stYWN0aW9uc1wiKVxuICAgICAgICAgIC5maW5kKFwiaW5wdXQsIHRleHRhcmVhLCBidXR0b24sIHNlbGVjdFwiKVxuICAgICAgICAgIC5hdHRyKFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFwiKTtcbiAgICAgICQoXCIjcXVpY2stYWN0aW9uLWZvcm1cIikuZmluZChcInNlbGVjdFwiKS5zZWxlY3QyKFwiZGVzdHJveVwiKS5zZWxlY3QyKCkudmFsKG51bGwpLnRyaWdnZXIoXCJjaGFuZ2VcIilcbiAgICB9XG4gIH07XG5cbiAgd2luZG93LnJlc2V0QWN0aW9uQnV0dG9ucyA9IHJlc2V0QWN0aW9uQnV0dG9uc1xuXG5cbi8vICBjb25zdCBpbml0RGF0YXRhYmxlID0gKHt1cmwsIGZpbmFsQ29sdW1ucywgYWR2YW5jZUZpbHRlciwgZHJhd0NhbGxiYWNrID0gdW5kZWZpbmVkLCBvcmRlckNvbHVtbn0pID0+IHtcblxuLy8gICAgIGNvbnN0IGRhdGFfdGFibGVfbGltaXQgPSAkKCdtZXRhW25hbWU9XCJkYXRhX3RhYmxlX2xpbWl0XCJdJykuYXR0cignY29udGVudCcpO1xuXG4vLyAgICAgd2luZG93LnJlbmRlcmVkRGF0YVRhYmxlID0gJCgnI2RhdGF0YWJsZScpLkRhdGFUYWJsZSh7XG4vLyAgICAgICAgIHByb2Nlc3Npbmc6IHRydWUsXG4vLyAgICAgICAgIHNlcnZlclNpZGU6IHRydWUsXG4vLyAgICAgICAgIGF1dG9XaWR0aDogZmFsc2UsXG4vLyAgICAgICAgIHJlc3BvbnNpdmU6IHRydWUsXG4vLyAgICAgICAgIGZpeGVkSGVhZGVyOiB0cnVlLFxuLy8gICAgICAgICBvcmRlcjogb3JkZXJDb2x1bW4sXG4vLyAgICAgICAgIHBhZ2VMZW5ndGg6IGRhdGFfdGFibGVfbGltaXQsXG4vLyAgICAgICAgIGRvbTogJzxcInRhYmxlLXJlc3BvbnNpdmUgbXktMyBtdC0zIG1iLTUgcGItMVwiIHJ0PicgKyAgLy8gVGFibGUgd2l0aG91dCBzZWFyY2hcbi8vICAgICAgICAgICAgICAnPFwicm93XCI8XCJjb2wtbWQtNlwiIGluZm8+PFwiY29sLW1kLTZcIiBwPj4nICsgIC8vIFJlbW92ZWQgbGVuZ3RoIG1lbnUgKGwpIGFuZCBzZWFyY2ggKGYpXG4vLyAgICAgICAgICAgICAgJzxcImNsZWFyXCI+Jyxcbi8vICAgICAgICAgYWpheDoge1xuLy8gICAgICAgICAgICAgXCJ0eXBlXCI6IFwiR0VUXCIsXG4vLyAgICAgICAgICAgICBcInVybFwiOiB1cmwsXG4vLyAgICAgICAgICAgICBcImRhdGFcIjogZnVuY3Rpb24oZCkge1xuLy8gICAgICAgICAgICAgICAgIGQuc2VhcmNoID0ge1xuLy8gICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJCgnLmR0LXNlYXJjaCcpLnZhbCgpXG4vLyAgICAgICAgICAgICAgICAgfTtcbi8vICAgICAgICAgICAgICAgICBkLmZpbHRlciA9IHtcbi8vICAgICAgICAgICAgICAgICAgICAgY29sdW1uX3N0YXR1czogJCgnI2NvbHVtbl9zdGF0dXMnKS52YWwoKVxuLy8gICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFkdmFuY2VGaWx0ZXIgPT0gJ2Z1bmN0aW9uJyAmJiBhZHZhbmNlRmlsdGVyKCkgIT09IHVuZGVmaW5lZCkge1xuLy8gICAgICAgICAgICAgICAgICAgICBkLmZpbHRlciA9IHsgLi4uZC5maWx0ZXIsIC4uLmFkdmFuY2VGaWx0ZXIoKSB9XG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgfSxcbi8vICAgICAgICAgfSxcbi8vICAgICAgICAgZHJhd0NhbGxiYWNrOiBmdW5jdGlvbigpIHtcbi8vICAgICAgICAgICAgIGlmIChsYXJhdmVsICE9PSB1bmRlZmluZWQpIHtcbi8vICAgICAgICAgICAgICAgICB3aW5kb3cubGFyYXZlbC5pbml0aWFsaXplKCk7XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAkKCcuc2VsZWN0MicpLnNlbGVjdDIoKTtcbi8vICAgICAgICAgICAgIGlmIChkcmF3Q2FsbGJhY2sgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZHJhd0NhbGxiYWNrID09ICdmdW5jdGlvbicpIHtcbi8vICAgICAgICAgICAgICAgICBkcmF3Q2FsbGJhY2soKTtcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgfSxcbi8vICAgICAgICAgY29sdW1uczogZmluYWxDb2x1bW5zLFxuLy8gICAgICAgICBpbmZvQ2FsbGJhY2s6IGZ1bmN0aW9uKHNldHRpbmdzLCBzdGFydCwgZW5kLCBtYXgsIHRvdGFsLCBwcmUpIHtcbi8vICAgICAgICAgICAgIGNvbnN0IGluZm8gPSBgU2hvd2luZyAke3N0YXJ0fSB0byAke2VuZH0gb2YgJHt0b3RhbH0gZW50cmllc2A7XG5cbi8vICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgaW5mbyBkaXNwbGF5IGF0IHRoZSBib3R0b21cbi8vICAgICAgICAgICAgICQoJy5kYXRhX3RhYmxlX3dpZGdldHMgLmluZm8nKS5odG1sKGluZm8pO1xuXG4vLyAgICAgICAgICAgICByZXR1cm4gaW5mbztcbi8vICAgICAgICAgfSxcbi8vICAgICB9KTtcblxuLy8gICAgIC8vIEhpZGUgdGhlIHNlYXJjaCBib3ggYnkgYWRkaW5nIGQtbm9uZSBjbGFzc1xuLy8gICAgICQoJy5kYXRhVGFibGVzX2ZpbHRlcicpLmFkZENsYXNzKCdkLW5vbmUnKTtcbi8vIH1cblxuY29uc3QgaW5pdERhdGF0YWJsZSA9ICh7dXJsLCBmaW5hbENvbHVtbnMsIGFkdmFuY2VGaWx0ZXIsIGRyYXdDYWxsYmFjayA9IHVuZGVmaW5lZCwgb3JkZXJDb2x1bW59KSA9PiB7XG5cbiAgY29uc3QgZGF0YV90YWJsZV9saW1pdCA9IHBhcnNlSW50KCQoJ21ldGFbbmFtZT1cImRhdGFfdGFibGVfbGltaXRcIl0nKS5hdHRyKCdjb250ZW50JyksIDEwKTtcblxuICB3aW5kb3cucmVuZGVyZWREYXRhVGFibGUgPSAkKCcjZGF0YXRhYmxlJykuRGF0YVRhYmxlKHtcbiAgICAgIHByb2Nlc3Npbmc6IHRydWUsXG4gICAgICBzZXJ2ZXJTaWRlOiB0cnVlLFxuICAgICAgYXV0b1dpZHRoOiBmYWxzZSxcbiAgICAgIHJlc3BvbnNpdmU6IHRydWUsXG4gICAgICBmaXhlZEhlYWRlcjogdHJ1ZSxcbiAgICAgIG9yZGVyOiBvcmRlckNvbHVtbixcbiAgICAgIHBhZ2VMZW5ndGg6IGRhdGFfdGFibGVfbGltaXQsXG4gICAgICBkb206ICc8XCJ0YWJsZS1yZXNwb25zaXZlIG15LTMgbXQtMyBtYi01IHBiLTFcIiBydD4nICsgIC8vIFRhYmxlIHdpdGhvdXQgc2VhcmNoXG4gICAgICAgICAgICc8XCJyb3dcIjxcImNvbC1tZC02XCIgaW5mbz48XCJjb2wtbWQtNlwiIHA+PicgKyAgLy8gUmVtb3ZlZCBsZW5ndGggbWVudSAobCkgYW5kIHNlYXJjaCAoZilcbiAgICAgICAgICAgJzxcImNsZWFyXCI+JyxcbiAgICAgIGFqYXg6IHtcbiAgICAgICAgICB0eXBlOiBcIkdFVFwiLFxuICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgIGRhdGE6IGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgZC5zZWFyY2ggPSB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZTogJCgnLmR0LXNlYXJjaCcpLnZhbCgpXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIGQuZmlsdGVyID0ge1xuICAgICAgICAgICAgICAgICAgY29sdW1uX3N0YXR1czogJCgnI2NvbHVtbl9zdGF0dXMnKS52YWwoKVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIGFkdmFuY2VGaWx0ZXIgPT09ICdmdW5jdGlvbicgJiYgYWR2YW5jZUZpbHRlcigpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgIGQuZmlsdGVyID0geyAuLi5kLmZpbHRlciwgLi4uYWR2YW5jZUZpbHRlcigpIH07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIGRyYXdDYWxsYmFjazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cubGFyYXZlbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgd2luZG93LmxhcmF2ZWwuaW5pdGlhbGl6ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAkKCcuc2VsZWN0MicpLnNlbGVjdDIoKTtcbiAgICAgICAgICBpZiAodHlwZW9mIGRyYXdDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBkcmF3Q2FsbGJhY2soKTtcbiAgICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY29sdW1uczogZmluYWxDb2x1bW5zLFxuICAgICAgaW5mb0NhbGxiYWNrOiBmdW5jdGlvbihzZXR0aW5ncywgc3RhcnQsIGVuZCwgbWF4LCB0b3RhbCwgcHJlKSB7XG4gICAgICAgICAgY29uc3QgaW5mbyA9IGBTaG93aW5nICR7c3RhcnR9IHRvICR7ZW5kfSBvZiAke3RvdGFsfSBlbnRyaWVzYDtcblxuICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgaW5mbyBkaXNwbGF5IGF0IHRoZSBib3R0b21cbiAgICAgICAgICAkKCcuZGF0YV90YWJsZV93aWRnZXRzIC5pbmZvJykuaHRtbChpbmZvKTtcblxuICAgICAgICAgIHJldHVybiBpbmZvO1xuICAgICAgfSxcbiAgfSk7XG5cbiAgLy8gSGlkZSB0aGUgc2VhcmNoIGJveCBieSBhZGRpbmcgZC1ub25lIGNsYXNzXG4gICQoJy5kYXRhVGFibGVzX2ZpbHRlcicpLmFkZENsYXNzKCdkLW5vbmUnKTtcbn1cblxud2luZG93LmluaXREYXRhdGFibGUgPSBpbml0RGF0YXRhYmxlO1xuXG5cbiAgd2luZG93LmluaXREYXRhdGFibGUgPSBpbml0RGF0YXRhYmxlXG5cbiAgZnVuY3Rpb24gZm9ybWF0Q3VycmVuY3kobnVtYmVyLCBub09mRGVjaW1hbCwgZGVjaW1hbFNlcGFyYXRvciwgdGhvdXNhbmRTZXBhcmF0b3IsIGN1cnJlbmN5UG9zaXRpb24sIGN1cnJlbmN5U3ltYm9sKSB7XG4gICAgLy8gQ29udmVydCB0aGUgbnVtYmVyIHRvIGEgc3RyaW5nIHdpdGggdGhlIGRlc2lyZWQgZGVjaW1hbCBwbGFjZXNcbiAgICBsZXQgZm9ybWF0dGVkTnVtYmVyID0gbnVtYmVyLnRvRml4ZWQobm9PZkRlY2ltYWwpXG5cbiAgICAvLyBTcGxpdCB0aGUgbnVtYmVyIGludG8gaW50ZWdlciBhbmQgZGVjaW1hbCBwYXJ0c1xuICAgIGxldCBbaW50ZWdlclBhcnQsIGRlY2ltYWxQYXJ0XSA9IGZvcm1hdHRlZE51bWJlci5zcGxpdCgnLicpXG5cbiAgICAvLyBBZGQgdGhvdXNhbmQgc2VwYXJhdG9ycyB0byB0aGUgaW50ZWdlciBwYXJ0XG4gICAgaW50ZWdlclBhcnQgPSBpbnRlZ2VyUGFydC5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCB0aG91c2FuZFNlcGFyYXRvcilcblxuICAgIC8vIFNldCBkZWNpbWFsUGFydCB0byBhbiBlbXB0eSBzdHJpbmcgaWYgaXQgaXMgdW5kZWZpbmVkXG4gICAgZGVjaW1hbFBhcnQgPSBkZWNpbWFsUGFydCB8fCAnJ1xuXG4gICAgLy8gQ29uc3RydWN0IHRoZSBmaW5hbCBmb3JtYXR0ZWQgY3VycmVuY3kgc3RyaW5nXG4gICAgbGV0IGN1cnJlbmN5U3RyaW5nID0gJydcblxuICAgIGlmIChjdXJyZW5jeVBvc2l0aW9uID09PSAnbGVmdCcgfHwgY3VycmVuY3lQb3NpdGlvbiA9PT0gJ2xlZnRfd2l0aF9zcGFjZScpIHtcbiAgICAgIGN1cnJlbmN5U3RyaW5nICs9IGN1cnJlbmN5U3ltYm9sXG4gICAgICBpZiAoY3VycmVuY3lQb3NpdGlvbiA9PT0gJ2xlZnRfd2l0aF9zcGFjZScpIHtcbiAgICAgICAgY3VycmVuY3lTdHJpbmcgKz0gJyAnXG4gICAgICB9XG4gICAgICBjdXJyZW5jeVN0cmluZyArPSBpbnRlZ2VyUGFydFxuICAgICAgLy8gQWRkIGRlY2ltYWwgcGFydCBhbmQgZGVjaW1hbCBzZXBhcmF0b3IgaWYgYXBwbGljYWJsZVxuICAgICAgaWYgKG5vT2ZEZWNpbWFsID4gMCkge1xuICAgICAgICBjdXJyZW5jeVN0cmluZyArPSBkZWNpbWFsU2VwYXJhdG9yICsgZGVjaW1hbFBhcnRcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY3VycmVuY3lQb3NpdGlvbiA9PT0gJ3JpZ2h0JyB8fCBjdXJyZW5jeVBvc2l0aW9uID09PSAncmlnaHRfd2l0aF9zcGFjZScpIHtcbiAgICAgIC8vIEFkZCBkZWNpbWFsIHBhcnQgYW5kIGRlY2ltYWwgc2VwYXJhdG9yIGlmIGFwcGxpY2FibGVcbiAgICAgIGlmIChub09mRGVjaW1hbCA+IDApIHtcbiAgICAgICAgY3VycmVuY3lTdHJpbmcgKz0gaW50ZWdlclBhcnQgKyBkZWNpbWFsU2VwYXJhdG9yICsgZGVjaW1hbFBhcnRcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW5jeVBvc2l0aW9uID09PSAncmlnaHRfd2l0aF9zcGFjZScpIHtcbiAgICAgICAgY3VycmVuY3lTdHJpbmcgKz0gJyAnXG4gICAgICB9XG4gICAgICBjdXJyZW5jeVN0cmluZyArPSBjdXJyZW5jeVN5bWJvbFxuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW5jeVN0cmluZ1xuICB9XG5cbiAgd2luZG93LmZvcm1hdEN1cnJlbmN5ID0gZm9ybWF0Q3VycmVuY3lcblxufSkoKVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7MEJBQ0EsdUtBQUFBLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLHdCQUFBQyxNQUFBLEdBQUFBLE1BQUEsT0FBQUMsQ0FBQSxH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Q0FBQzRILElBQUksQ0FBQ0QsSUFBSSxDQUFDO1FBRXpDLE9BQU9BLElBQUk7TUFDZjtJQUNKLENBQUMsQ0FBQzs7SUFFRjtJQUNBM0gsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUNzRSxRQUFRLENBQUMsUUFBUSxDQUFDO0VBQzVDLENBQUM7RUFFRG5FLE1BQU0sQ0FBQ3dGLGFBQWEsR0FBR0EsYUFBYTtFQUdsQ3hGLE1BQU0sQ0FBQ3dGLGFBQWEsR0FBR0EsYUFBYTtFQUVwQyxTQUFTa0MsY0FBY0EsQ0FBQ0MsTUFBTSxFQUFFQyxXQUFXLEVBQUVDLGdCQUFnQixFQUFFQyxpQkFBaUIsRUFBRUMsZ0JBQWdCLEVBQUVDLGNBQWMsRUFBRTtJQUNsSDtJQUNBLElBQUlDLGVBQWUsR0FBR04sTUFBTSxDQUFDTyxPQUFPLENBQUNOLFdBQVcsQ0FBQzs7SUFFakQ7SUFDQSxJQUFBTyxxQkFBQSxHQUFpQ0YsZUFBZSxDQUFDRyxLQUFLLENBQUMsR0FBRyxDQUFDO01BQUFDLHNCQUFBLEdBQUFDLGNBQUEsQ0FBQUgscUJBQUE7TUFBdERJLFdBQVcsR0FBQUYsc0JBQUE7TUFBRUcsV0FBVyxHQUFBSCxzQkFBQTs7SUFFN0I7SUFDQUUsV0FBVyxHQUFHQSxXQUFXLENBQUNFLE9BQU8sQ0FBQyx1QkFBdUIsRUFBRVgsaUJBQWlCLENBQUM7O0lBRTdFO0lBQ0FVLFdBQVcsR0FBR0EsV0FBVyxJQUFJLEVBQUU7O0lBRS9CO0lBQ0EsSUFBSUUsY0FBYyxHQUFHLEVBQUU7SUFFdkIsSUFBSVgsZ0JBQWdCLEtBQUssTUFBTSxJQUFJQSxnQkFBZ0IsS0FBSyxpQkFBaUIsRUFBRTtNQUN6RVcsY0FBYyxJQUFJVixjQUFjO01BQ2hDLElBQUlELGdCQUFnQixLQUFLLGlCQUFpQixFQUFFO1FBQzFDVyxjQUFjLElBQUksR0FBRztNQUN2QjtNQUNBQSxjQUFjLElBQUlILFdBQVc7TUFDN0I7TUFDQSxJQUFJWCxXQUFXLEdBQUcsQ0FBQyxFQUFFO1FBQ25CYyxjQUFjLElBQUliLGdCQUFnQixHQUFHVyxXQUFXO01BQ2xEO0lBQ0Y7SUFFQSxJQUFJVCxnQkFBZ0IsS0FBSyxPQUFPLElBQUlBLGdCQUFnQixLQUFLLGtCQUFrQixFQUFFO01BQzNFO01BQ0EsSUFBSUgsV0FBVyxHQUFHLENBQUMsRUFBRTtRQUNuQmMsY0FBYyxJQUFJSCxXQUFXLEdBQUdWLGdCQUFnQixHQUFHVyxXQUFXO01BQ2hFO01BQ0EsSUFBSVQsZ0JBQWdCLEtBQUssa0JBQWtCLEVBQUU7UUFDM0NXLGNBQWMsSUFBSSxHQUFHO01BQ3ZCO01BQ0FBLGNBQWMsSUFBSVYsY0FBYztJQUNsQztJQUVBLE9BQU9VLGNBQWM7RUFDdkI7RUFFQTFJLE1BQU0sQ0FBQzBILGNBQWMsR0FBR0EsY0FBYztBQUV4QyxDQUFDLEVBQUUsQ0FBQyIsImlnbm9yZUxpc3QiOltdLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/app.js"]();
/******/ 	
/******/ })()
;